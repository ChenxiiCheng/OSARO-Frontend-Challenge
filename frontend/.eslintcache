[{"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/App.js":"1","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/stores/store.js":"2","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/serviceWorker.js":"3","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/index.js":"4","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/navigationBar/index.js":"5","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/robot/index.js":"6","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/leftMenu/index.js":"7","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/stores/robotSlice.js":"8","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/utils/constants.js":"9","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/historyTable/index.js":"10"},{"size":665,"mtime":1610915943825,"results":"11","hashOfConfig":"12"},{"size":180,"mtime":1610915793989,"results":"13","hashOfConfig":"12"},{"size":5141,"mtime":1610858902854,"results":"14","hashOfConfig":"12"},{"size":573,"mtime":1610918306559,"results":"15","hashOfConfig":"12"},{"size":753,"mtime":1610941965394,"results":"16","hashOfConfig":"12"},{"size":4273,"mtime":1610944601362,"results":"17","hashOfConfig":"12"},{"size":1650,"mtime":1610944957942,"results":"18","hashOfConfig":"12"},{"size":2976,"mtime":1610939896294,"results":"19","hashOfConfig":"12"},{"size":417,"mtime":1610941993428,"results":"20","hashOfConfig":"12"},{"size":1710,"mtime":1610940159576,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jpqxns",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/App.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/stores/store.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/serviceWorker.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/index.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/navigationBar/index.js",["44","45","46"],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/robot/index.js",["47","48"],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/leftMenu/index.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/stores/robotSlice.js",["49","50","51","52"],"import { createSlice } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\nimport { DATA_ACTIONS, ENDPOINT } from '../utils/constants';\n\nexport const robotSlice = createSlice({\n  name: 'robot',\n  initialState: {\n    loading: false,\n    currentState: '',\n    failedCount: 0,\n    commands: [],\n    error: {\n      status_code: null,\n      error_message: null,\n    },\n  },\n  reducers: {\n    setCurrentState: (state, { payload: { current_state } }) => {\n      state.loading = false;\n      state.currentState = current_state;\n    },\n    setCurrentStateFailed: (state, { payload }) => {\n      const { error_message, status_code } = JSON.parse(payload);\n      state.loading = false;\n      state.failedCount += 1;\n      state.currentState = state.currentState;\n      state.error = { error_message, status_code };\n    },\n    setStateInitilization: (state, { payload }) => {\n      state.loading = true;\n      state.failedCount = state.failedCount;\n      if (payload) {\n        state.commands = [\n          ...state.commands,\n          { timestamp: JSON.stringify(dayjs(new Date())), command: payload },\n        ];\n      }\n      state.currentState = state.currentState;\n      state.error.status_code = null;\n      state.error.error_message = null;\n    },\n    resetRobotState: (state, { payload }) => {\n      state.loading = false;\n      state.currentState = '';\n      state.error.status_code = null;\n      state.error.error_message = null;\n    },\n    resetFailedCount: (state, { payload }) => {\n      state.failedCount = 0;\n    },\n  },\n});\n\nexport const {\n  setCurrentState,\n  setCurrentStateFailed,\n  setStateInitilization,\n  resetRobotState,\n  resetFailedCount,\n} = robotSlice.actions;\n\n/**\n * @desc: Get robot current state\n * @method: GET\n */\nexport const getRobotCurrentStateAsync = () => async (dispatch) => {\n  dispatch(setStateInitilization('get current state'));\n  const res = await fetch(`${ENDPOINT}/state`);\n  const data = await res.json();\n  dispatch(setCurrentState(data));\n};\n\n/**\n * @desc: Change robot state action\n * @method: POST\n * @param: {string} action - start | place | repair | done | reset\n */\nexport const changeRobotStateAsync = (action) => async (dispatch) => {\n  try {\n    dispatch(setStateInitilization(action));\n    const res = await fetch(`${ENDPOINT}/action`, {\n      method: 'POST',\n      body: JSON.stringify({ action: action }),\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    });\n    const data = await res.json();\n\n    if (data?.status_code) {\n      if (data?.status_code === '200') {\n        dispatch(setCurrentState(data));\n      } else if (data?.status_code === '500') {\n        dispatch(setCurrentStateFailed(JSON.stringify(data)));\n      } else if (data?.status_code === '503') {\n        dispatch(changeRobotStateAsync(action));\n      }\n    }\n  } catch (error) {\n    dispatch(setCurrentStateFailed(JSON.stringify(error)));\n  }\n};\n\nexport const selectRobot = (state) => state.robot;\n\nexport default robotSlice.reducer;\n","/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/utils/constants.js",[],"/Users/chenxi/xii/代码区4/osaro-demo/frontend/src/components/historyTable/index.js",["53"],"import React from 'react';\nimport { Table, Tag } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { selectRobot } from '../../stores/robotSlice';\nimport dayjs from 'dayjs';\n\nconst columns = [\n  {\n    title: 'ID',\n    dataIndex: 'id',\n    key: 'id',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: 'Timestamp',\n    dataIndex: 'timestamp',\n    key: 'timestamp',\n  },\n  {\n    title: 'Tags',\n    key: 'tags',\n    dataIndex: 'tags',\n    render: (tags) => (\n      <>\n        {tags.map((tag) => {\n          let color = '';\n          if (tag === 'start') {\n            color = 'green';\n          } else if (tag === 'place') {\n            color = 'pink';\n          } else if (tag === 'repair') {\n            color = 'orange';\n          } else if (tag === 'done') {\n            color = 'gray';\n          } else if (tag === 'reset') {\n            color = 'geekblue';\n          }\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </>\n    ),\n  },\n];\n\nexport const HistoryTable = () => {\n  const robotStateSlice = useSelector(selectRobot);\n  const [tableData, setTableData] = React.useState([]);\n\n  React.useEffect(() => {\n    const commands = robotStateSlice.commands;\n    const data = [];\n    for (let i = 0; i < commands.length; i++) {\n      let obj = {};\n      obj.id = Number(i);\n      obj.key = i;\n      obj.tags = [commands[i].command];\n      obj.timestamp = dayjs(JSON.parse(commands[i].timestamp)).format(\n        'MM/DD/YYYY HH:mm:ss'\n      );\n      data.push(obj);\n    }\n\n    setTableData(data);\n  }, [robotStateSlice.commands]);\n\n  return <Table columns={columns} dataSource={tableData} />;\n};\n",{"ruleId":"54","severity":1,"message":"55","line":12,"column":28,"nodeType":"56","endLine":12,"endColumn":43},{"ruleId":"54","severity":1,"message":"55","line":17,"column":30,"nodeType":"56","endLine":17,"endColumn":45},{"ruleId":"54","severity":1,"message":"55","line":22,"column":31,"nodeType":"56","endLine":22,"endColumn":46},{"ruleId":"57","severity":1,"message":"58","line":9,"column":3,"nodeType":"59","messageId":"60","endLine":9,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":37,"column":6,"nodeType":"63","endLine":37,"endColumn":29,"suggestions":"64"},{"ruleId":"57","severity":1,"message":"65","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":26,"column":28,"nodeType":"68","messageId":"69","endLine":26,"endColumn":46},{"ruleId":"66","severity":1,"message":"70","line":31,"column":27,"nodeType":"68","messageId":"69","endLine":31,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":38,"column":28,"nodeType":"68","messageId":"69","endLine":38,"endColumn":46},{"ruleId":"71","severity":1,"message":"72","line":12,"column":23,"nodeType":"73","endLine":12,"endColumn":26},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'resetRobotState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'robotSliceState.failedCount'. Either include it or remove the dependency array.","ArrayExpression",["74"],"'DATA_ACTIONS' is defined but never used.","no-self-assign","'state.currentState' is assigned to itself.","MemberExpression","selfAssignment","'state.failedCount' is assigned to itself.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"desc":"75","fix":"76"},"Update the dependencies array to be: [robotSliceState.error, robotSliceState.failedCount]",{"range":"77","text":"78"},[1080,1103],"[robotSliceState.error, robotSliceState.failedCount]"]